/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ralphmcdougallgrade10pat;

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Ralph McDougall 4/11/2016
 */
public class GUIQuestion extends javax.swing.JFrame {

    /**
     * This is the GUI that asks the user the questions
     */
    
    private int FIRST_NUM = 0; // The first number in the sum
    private int SECOND_NUM = 0; //  The second number in the sum

    // Enumerate containing all of the operators
    private enum OPERATORS {
        ADDITION, SUBTRACTION, MULTIPLICATION, DIVISION
    };

    private OPERATORS CURR_OPERATOR = OPERATORS.ADDITION; // Default to addition

    private String QUESTION_DISPLAY = ""; // What is displayed in the Question label

    private final static int NUM_OPTIONS = 4; // The number of options
    private int[] OPTIONS = {0, 0, 0, 0}; // Array of the options

    private int CORRECT_ANSWER = 0; // The correct answer
    private int CORRECT_OPTION = 0; // The correct index of the array

    private int TARGET_SCORE = 0; // The score the user wants to get
    private int CURRENT_SCORE = 0; // The user's current score
    private int NUM_INCORRECT = 0; // The number of questions the user has gotten incorrect

    private static Stopwatch STOPWATCH; // The stopwatch

    private int MILLISECONDS_PASSED = 0; // The number of millisecond passed since the start
    private int SECONDS_PASSED = 0; //  The number of seconds passed since the start

    private boolean STOPWATCH_RUNNING = false; // Is the stopwatch running

    // How far off the incorrect answers are from the correct answer for each difficulty
    private final int[] DIFFICULTY_BUFFERS = {5, 10, 20, 40};
    private int BUFFER = 5; // How close the options are to the correct answer

    private int UPPER_NUM_LIMIT = 10; // The highest number that can appear in the question

    private int SELECTED_DIFFICULTY = 1; // The difficulty selected by the user in the options screen

    GUIStart parentGUI; // The screen that created this GUI
    
    private String NAME = ""; // The user's name

    // An array containing the upper limit of the numbers for each operator and difficulty
    // {BASICS, EASY, MODERATE, DIFFICULT}
    private final int[][] DIFFICULTIES = {{10, 20, 100, 500}, // Addition
    {10, 20, 100, 500}, // Subtraction
    {5, 10, 15, 20}, // Multiplication
    {5, 10, 15, 20}};         // Division

    public GUIQuestion(int _TARGET_SCORE, GUIStart _parentGUI, int _currentOperator, int _SELECTED_DIFFICULTY, String _NAME) {
        initComponents();

        this.TARGET_SCORE = _TARGET_SCORE;
        this.STOPWATCH = new Stopwatch(this); // Init the stopwatch
        this.SELECTED_DIFFICULTY = _SELECTED_DIFFICULTY;
        // Get the buffer from the difficulty
        this.BUFFER = DIFFICULTY_BUFFERS[this.SELECTED_DIFFICULTY - 1];

        this.parentGUI = _parentGUI;
        // Get the upper limit from the difficulty
        this.UPPER_NUM_LIMIT = this.DIFFICULTIES[_currentOperator][this.SELECTED_DIFFICULTY - 1];

        this.NAME = _NAME;
        
        this.setLocationRelativeTo(this.parentGUI);

        // Set the operator
        setOperator(_currentOperator);
        
        // Get a new question
        generateNewQuestion(1, this.UPPER_NUM_LIMIT);

        // Update all of the question labels on the screen
        updateScreen();

        // Set the stopwatch to 0
        setStopwatchTime(0);
        updateStopwatchDisplay();
        
        // Reset the scoreboard
        initScoreBoard();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        pnlBackground = new javax.swing.JPanel();
        pnlQuestion = new javax.swing.JPanel();
        lblQuestion = new javax.swing.JLabel();
        pnlOptions = new javax.swing.JPanel();
        pnlOption1 = new javax.swing.JPanel();
        btnOption1 = new javax.swing.JButton();
        pnlOption2 = new javax.swing.JPanel();
        btnOption2 = new javax.swing.JButton();
        pnlOption3 = new javax.swing.JPanel();
        btnOption3 = new javax.swing.JButton();
        pnlOption4 = new javax.swing.JPanel();
        btnOption4 = new javax.swing.JButton();
        pnlTitle = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        pnlStopwatch = new javax.swing.JPanel();
        lblStopwatch = new javax.swing.JLabel();
        pnlScoreMain = new javax.swing.JPanel();
        lblOlympicRingsImg = new javax.swing.JLabel();
        pnlScoreSub = new javax.swing.JPanel();
        lblScore = new javax.swing.JLabel();
        lblTarget = new javax.swing.JLabel();
        btnStop = new javax.swing.JButton();
        pnlIncorrect = new javax.swing.JPanel();
        lblIncorrect = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 47, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(900, 675));

        pnlBackground.setBackground(new java.awt.Color(255, 255, 46));
        pnlBackground.setMaximumSize(new java.awt.Dimension(900, 675));
        pnlBackground.setMinimumSize(new java.awt.Dimension(900, 675));
        pnlBackground.setPreferredSize(new java.awt.Dimension(900, 675));

        pnlQuestion.setBackground(new java.awt.Color(153, 255, 153));
        pnlQuestion.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 10, true));
        pnlQuestion.setMaximumSize(new java.awt.Dimension(800, 95));
        pnlQuestion.setMinimumSize(new java.awt.Dimension(800, 95));
        pnlQuestion.setPreferredSize(new java.awt.Dimension(800, 85));

        lblQuestion.setFont(new java.awt.Font("RomanD", 1, 40)); // NOI18N
        lblQuestion.setForeground(new java.awt.Color(0, 70, 0));
        lblQuestion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblQuestion.setText("9 + 10");
        lblQuestion.setPreferredSize(new java.awt.Dimension(800, 85));

        javax.swing.GroupLayout pnlQuestionLayout = new javax.swing.GroupLayout(pnlQuestion);
        pnlQuestion.setLayout(pnlQuestionLayout);
        pnlQuestionLayout.setHorizontalGroup(
            pnlQuestionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlQuestionLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(lblQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlQuestionLayout.setVerticalGroup(
            pnlQuestionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlQuestionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlOptions.setBackground(new java.awt.Color(255, 255, 255));
        pnlOptions.setMaximumSize(new java.awt.Dimension(706, 406));
        pnlOptions.setMinimumSize(new java.awt.Dimension(706, 406));
        pnlOptions.setPreferredSize(new java.awt.Dimension(706, 406));

        pnlOption1.setPreferredSize(new java.awt.Dimension(350, 200));

        btnOption1.setBackground(new java.awt.Color(255, 0, 0));
        btnOption1.setFont(new java.awt.Font("Trebuchet MS", 0, 100)); // NOI18N
        btnOption1.setText("21");
        btnOption1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(160, 0, 0), 10));
        btnOption1.setMaximumSize(new java.awt.Dimension(350, 200));
        btnOption1.setMinimumSize(new java.awt.Dimension(350, 200));
        btnOption1.setPreferredSize(new java.awt.Dimension(250, 200));
        btnOption1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOption1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlOption1Layout = new javax.swing.GroupLayout(pnlOption1);
        pnlOption1.setLayout(pnlOption1Layout);
        pnlOption1Layout.setHorizontalGroup(
            pnlOption1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnOption1, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
        );
        pnlOption1Layout.setVerticalGroup(
            pnlOption1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnOption1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pnlOption2.setPreferredSize(new java.awt.Dimension(350, 200));

        btnOption2.setBackground(new java.awt.Color(51, 51, 255));
        btnOption2.setFont(new java.awt.Font("Trebuchet MS", 0, 100)); // NOI18N
        btnOption2.setText("19");
        btnOption2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 180), 10));
        btnOption2.setMaximumSize(new java.awt.Dimension(350, 200));
        btnOption2.setMinimumSize(new java.awt.Dimension(350, 200));
        btnOption2.setPreferredSize(new java.awt.Dimension(250, 200));
        btnOption2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOption2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlOption2Layout = new javax.swing.GroupLayout(pnlOption2);
        pnlOption2.setLayout(pnlOption2Layout);
        pnlOption2Layout.setHorizontalGroup(
            pnlOption2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnOption2, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
        );
        pnlOption2Layout.setVerticalGroup(
            pnlOption2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnOption2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pnlOption3.setPreferredSize(new java.awt.Dimension(350, 200));

        btnOption3.setBackground(new java.awt.Color(51, 255, 51));
        btnOption3.setFont(new java.awt.Font("Trebuchet MS", 0, 100)); // NOI18N
        btnOption3.setText("17");
        btnOption3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 160, 0), 10));
        btnOption3.setMaximumSize(new java.awt.Dimension(350, 200));
        btnOption3.setMinimumSize(new java.awt.Dimension(350, 200));
        btnOption3.setPreferredSize(new java.awt.Dimension(250, 200));
        btnOption3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOption3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlOption3Layout = new javax.swing.GroupLayout(pnlOption3);
        pnlOption3.setLayout(pnlOption3Layout);
        pnlOption3Layout.setHorizontalGroup(
            pnlOption3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnOption3, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
        );
        pnlOption3Layout.setVerticalGroup(
            pnlOption3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnOption3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pnlOption4.setPreferredSize(new java.awt.Dimension(350, 200));

        btnOption4.setBackground(new java.awt.Color(255, 255, 0));
        btnOption4.setFont(new java.awt.Font("Trebuchet MS", 0, 100)); // NOI18N
        btnOption4.setText("24");
        btnOption4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 0), 10));
        btnOption4.setMaximumSize(new java.awt.Dimension(350, 200));
        btnOption4.setMinimumSize(new java.awt.Dimension(350, 200));
        btnOption4.setPreferredSize(new java.awt.Dimension(250, 200));
        btnOption4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOption4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlOption4Layout = new javax.swing.GroupLayout(pnlOption4);
        pnlOption4.setLayout(pnlOption4Layout);
        pnlOption4Layout.setHorizontalGroup(
            pnlOption4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnOption4, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
        );
        pnlOption4Layout.setVerticalGroup(
            pnlOption4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnOption4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout pnlOptionsLayout = new javax.swing.GroupLayout(pnlOptions);
        pnlOptions.setLayout(pnlOptionsLayout);
        pnlOptionsLayout.setHorizontalGroup(
            pnlOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlOptionsLayout.createSequentialGroup()
                .addComponent(pnlOption1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnlOption2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(pnlOption3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(pnlOptionsLayout.createSequentialGroup()
                .addGap(356, 356, 356)
                .addComponent(pnlOption4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pnlOptionsLayout.setVerticalGroup(
            pnlOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlOptionsLayout.createSequentialGroup()
                .addGroup(pnlOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlOptionsLayout.createSequentialGroup()
                        .addComponent(pnlOption1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlOption3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlOptionsLayout.createSequentialGroup()
                        .addComponent(pnlOption2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlOption4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pnlTitle.setBackground(new java.awt.Color(255, 255, 255));

        lblTitle.setFont(new java.awt.Font("Lucida Calligraphy", 1, 48)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setLabelFor(pnlTitle);
        lblTitle.setText("Maths Olympics");
        lblTitle.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(255, 255, 0), new java.awt.Color(51, 255, 51)));

        javax.swing.GroupLayout pnlTitleLayout = new javax.swing.GroupLayout(pnlTitle);
        pnlTitle.setLayout(pnlTitleLayout);
        pnlTitleLayout.setHorizontalGroup(
            pnlTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTitleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlTitleLayout.setVerticalGroup(
            pnlTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTitleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlStopwatch.setBackground(new java.awt.Color(255, 255, 102));
        pnlStopwatch.setPreferredSize(new java.awt.Dimension(190, 190));

        lblStopwatch.setFont(new java.awt.Font("SimSun-ExtB", 1, 48)); // NOI18N
        lblStopwatch.setForeground(new java.awt.Color(255, 255, 255));
        lblStopwatch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Stopwatch_Background_Edited.png"))); // NOI18N
        lblStopwatch.setText("45");
        lblStopwatch.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lblStopwatch.setVerifyInputWhenFocusTarget(false);

        javax.swing.GroupLayout pnlStopwatchLayout = new javax.swing.GroupLayout(pnlStopwatch);
        pnlStopwatch.setLayout(pnlStopwatchLayout);
        pnlStopwatchLayout.setHorizontalGroup(
            pnlStopwatchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblStopwatch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnlStopwatchLayout.setVerticalGroup(
            pnlStopwatchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblStopwatch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pnlScoreMain.setBackground(new java.awt.Color(255, 255, 255));
        pnlScoreMain.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        pnlScoreMain.setMaximumSize(new java.awt.Dimension(176, 200));
        pnlScoreMain.setMinimumSize(new java.awt.Dimension(176, 200));

        lblOlympicRingsImg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/OlympicLogo.png"))); // NOI18N

        pnlScoreSub.setBackground(new java.awt.Color(204, 204, 204));
        pnlScoreSub.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 5));

        lblScore.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        lblScore.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblScore.setText("8");
        lblScore.setFocusable(false);
        lblScore.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        lblTarget.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblTarget.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTarget.setText("Target: 10");

        javax.swing.GroupLayout pnlScoreSubLayout = new javax.swing.GroupLayout(pnlScoreSub);
        pnlScoreSub.setLayout(pnlScoreSubLayout);
        pnlScoreSubLayout.setHorizontalGroup(
            pnlScoreSubLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlScoreSubLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlScoreSubLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblTarget, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblScore, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlScoreSubLayout.setVerticalGroup(
            pnlScoreSubLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlScoreSubLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblScore)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblTarget, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout pnlScoreMainLayout = new javax.swing.GroupLayout(pnlScoreMain);
        pnlScoreMain.setLayout(pnlScoreMainLayout);
        pnlScoreMainLayout.setHorizontalGroup(
            pnlScoreMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlScoreMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlScoreMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnlScoreSub, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblOlympicRingsImg, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlScoreMainLayout.setVerticalGroup(
            pnlScoreMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlScoreMainLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblOlympicRingsImg, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlScoreSub, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        btnStop.setBackground(new java.awt.Color(255, 0, 51));
        btnStop.setFont(new java.awt.Font("Perpetua Titling MT", 1, 18)); // NOI18N
        btnStop.setText("Stop!");
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });

        lblIncorrect.setBackground(new java.awt.Color(255, 255, 255));
        lblIncorrect.setForeground(new java.awt.Color(255, 0, 0));
        lblIncorrect.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblIncorrect.setText("Incorrect: 0");

        javax.swing.GroupLayout pnlIncorrectLayout = new javax.swing.GroupLayout(pnlIncorrect);
        pnlIncorrect.setLayout(pnlIncorrectLayout);
        pnlIncorrectLayout.setHorizontalGroup(
            pnlIncorrectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblIncorrect, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
        );
        pnlIncorrectLayout.setVerticalGroup(
            pnlIncorrectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblIncorrect, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout pnlBackgroundLayout = new javax.swing.GroupLayout(pnlBackground);
        pnlBackground.setLayout(pnlBackgroundLayout);
        pnlBackgroundLayout.setHorizontalGroup(
            pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBackgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBackgroundLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(pnlOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pnlBackgroundLayout.createSequentialGroup()
                        .addGroup(pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pnlStopwatch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnStop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlBackgroundLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(pnlTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(pnlQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                            .addGroup(pnlBackgroundLayout.createSequentialGroup()
                                .addGap(185, 185, 185)
                                .addComponent(pnlIncorrect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(pnlScoreMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlBackgroundLayout.setVerticalGroup(
            pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBackgroundLayout.createSequentialGroup()
                .addGroup(pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlBackgroundLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pnlScoreMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(pnlBackgroundLayout.createSequentialGroup()
                                .addComponent(pnlTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(pnlIncorrect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pnlQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(pnlBackgroundLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnStop)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlStopwatch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlBackground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlBackground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Event methods

    private void btnOption1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOption1ActionPerformed
        // TOP LEFT button clicked
        
        // Check if this is the correct option
        if (this.CORRECT_OPTION == 0) {
            this.CURRENT_SCORE += 1; // Increase score
        } else {
            answerIncorrect(); // They chose the wrong option
        }

        try {
            // Make a new question
            nextQuestion();
        } catch (IOException ex) {
            // Something went wrong :(
            Logger.getLogger(GUIQuestion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnOption1ActionPerformed

    private void btnOption2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOption2ActionPerformed
        // TOP RIGHT button clicked
        if (this.CORRECT_OPTION == 1) {
            this.CURRENT_SCORE += 1;
        } else {
            answerIncorrect();
        }

        try {
            nextQuestion();
        } catch (IOException ex) {
            Logger.getLogger(GUIQuestion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnOption2ActionPerformed

    private void btnOption3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOption3ActionPerformed
        // BOTTOM LEFT button clicked 
        if (this.CORRECT_OPTION == 2) {
            this.CURRENT_SCORE += 1;
        } else {
            answerIncorrect();
        }

        try {
            nextQuestion();
        } catch (IOException ex) {
            Logger.getLogger(GUIQuestion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnOption3ActionPerformed

    private void btnOption4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOption4ActionPerformed
        // BOTTOM RIGHT button clicked
        if (this.CORRECT_OPTION == 3) {
            this.CURRENT_SCORE += 1;
        } else {
            answerIncorrect();
        }

        try {
            nextQuestion();
        } catch (IOException ex) {
            Logger.getLogger(GUIQuestion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnOption4ActionPerformed

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        // "Stop" button clicked
        stop();
    }//GEN-LAST:event_btnStopActionPerformed

    private void generateQuestionValues(int min_num, int max_num) {
        // Generate new values for the new question
        
        switch (this.CURR_OPERATOR) {
            case ADDITION:
                generateAddition(min_num, max_num); // Make an addition sum
                break;
            case SUBTRACTION:
                generateSubtraction(min_num, max_num); // Make a subtraction sum
                break;
            case MULTIPLICATION:
                generateMultiplication(min_num, max_num); // Make a multiplication sum
                break;
            case DIVISION:
                generateDivision(min_num, max_num); // Make a division sum
                break;
            default:
                break;
        }
    }

    private void generateAddition(int min, int max) {
        this.FIRST_NUM = randomInRange(min, max); // The numbers are in that range
        this.SECOND_NUM = randomInRange(min, max);
        this.CORRECT_ANSWER = this.FIRST_NUM + this.SECOND_NUM; // Calculate right answer
    }

    private void generateSubtraction(int min, int max) {
        this.CORRECT_ANSWER = randomInRange(min, max); // Get the correct answer first
        this.SECOND_NUM = randomInRange(min, max); // Get the smaller of the numbers
        this.FIRST_NUM = this.CORRECT_ANSWER + this.SECOND_NUM; // The larger number is the sum of the answer and the smaller number
    }

    private void generateMultiplication(int min, int max) {
        this.FIRST_NUM = randomInRange(min, max); // Numbers in that range
        this.SECOND_NUM = randomInRange(min, max);
        this.CORRECT_ANSWER = this.FIRST_NUM * this.SECOND_NUM; // Calculate right answer
    }

    private void generateDivision(int min, int max) {
        this.CORRECT_ANSWER = randomInRange(min, max); // Get the correct answer
        this.SECOND_NUM = randomInRange(min, max); // Get the smaller number
        while (this.SECOND_NUM == 0) { // smaller number cannot be 0 (div by 0)
            this.SECOND_NUM = randomInRange(min, max);
        }
        this.FIRST_NUM = this.SECOND_NUM * this.CORRECT_ANSWER; // Get the bigger number by multiplying answer and smaller number
    }

    private void generateNewOptions() {
        // Choose which option the correct option is
        this.CORRECT_OPTION = randomInRange(0, 3);
        // Set the correct option in the options
        this.OPTIONS[this.CORRECT_OPTION] = this.CORRECT_ANSWER;

        for (int i = 0; i < 4; ++i) {
            if (i == this.CORRECT_OPTION) {
                // This is where the CORRECT_OPTION is supposed to go
                continue;
            }
            
            // Assume the new option is invalid
            boolean invalidNumber = true;
            int value = 0; // New option

            while (invalidNumber) { // Keep generating until a valid number is found
                invalidNumber = false;

                int min_range = this.CORRECT_ANSWER - BUFFER; // Get the min and max of where the answer can go
                int max_range = this.CORRECT_ANSWER + BUFFER;
                if (min_range < 0) {
                    // If the min_range is negative, make it 0
                    min_range = 0;
                }
                value = randomInRange(min_range, max_range); // Get a new value

                for (int j = 0; j < i; ++j) {
                    if (value == this.OPTIONS[j]) // Make sure the new answer is different from those that are already being used
                    {
                        invalidNumber = true; // Invalid option
                        break;
                    }
                }
                if (value == this.CORRECT_ANSWER) // Make sure the new answer is different from the correct answer
                {
                    invalidNumber = true;
                }
            }

            this.OPTIONS[i] = value;
        }

    }

    private void generateNewQuestion(int min_num, int max_num) {
        // Methods for generating a new question
        generateQuestionValues(min_num, max_num); // Get new question
        generateNewOptions(); // Get new options
    }

    private int randomInRange(int min, int max) // [min, max]
    {
        // Return a random integer
        double r = Math.random();

        r *= (max - min + 1);
        r += min;

        return (int) r;
    }

    private boolean targetReached() {
        // Check if the required number of questions have been answered correctly
        return this.CURRENT_SCORE >= this.TARGET_SCORE;
    }

    private void nextQuestion() throws IOException {
        if (targetReached()) {
            // The number of questions answered is enough.
            openFeedbackGUI();
        }

        // 3 questions incorrect
        if (this.NUM_INCORRECT == 3) {
            stop(true); // Stop with disqualified parameter
        }
        // Get a new question
        generateNewQuestion(0, this.UPPER_NUM_LIMIT);

        // Update the question labels
        updateScreen();
    }

    private void setOperator(int _currentOperator) {
        // Set the operator the enum
        switch (_currentOperator) {
            case 0:
                this.CURR_OPERATOR = OPERATORS.ADDITION;
                break;
            case 1:
                this.CURR_OPERATOR = OPERATORS.SUBTRACTION;
                break;
            case 2:
                this.CURR_OPERATOR = OPERATORS.MULTIPLICATION;
                break;
            case 3:
                this.CURR_OPERATOR = OPERATORS.DIVISION;
                break;
            default:
                break;
        }
    }

    // Display update methods
    private void updateQuestionDisplay() {
        // Update the question display to the new question
        String new_question = ""; // Construct the question
        new_question += this.FIRST_NUM;
        new_question += " ";

        switch (this.CURR_OPERATOR) {
            case ADDITION:
                new_question += "+";
                break;
            case SUBTRACTION:
                new_question += "-";
                break;
            case MULTIPLICATION:
                new_question += "x";
                break;
            case DIVISION:
                new_question += (char) (247);//"/";
                break;
            default:
                new_question += "ERROR";
                break;

        }
        new_question += " ";
        new_question += this.SECOND_NUM;

        this.QUESTION_DISPLAY = new_question;

        this.lblQuestion.setText(this.QUESTION_DISPLAY); // Update the question label
    }

    private void updateButtonDisplay() {
        // Update the button displays
        btnOption1.setText("" + this.OPTIONS[0]);
        btnOption2.setText("" + this.OPTIONS[1]);
        btnOption3.setText("" + this.OPTIONS[2]);
        btnOption4.setText("" + this.OPTIONS[3]);
    }

    public void setStopwatchTime(int millisPassed) {
        // Set the number of milliseconds and seconds passed
        this.MILLISECONDS_PASSED = millisPassed;
        this.SECONDS_PASSED = (int) (this.MILLISECONDS_PASSED / 1000);
    }

    public void updateStopwatchDisplay() {
        // Update the stopwatch time
        lblStopwatch.setText("" + this.SECONDS_PASSED);
    }

    private void updateScreen() {
        // Do all of the screen updates all at once

        // Make sure the stopwatch is running
        if (!this.STOPWATCH_RUNNING) {
            // Do this now to make sure time is not lost while the GUI is initialised
            // Run it
            this.STOPWATCH.start();
            this.STOPWATCH_RUNNING = true;
        }
        
        // Update the various parts of the screen
        updateQuestionDisplay();
        updateButtonDisplay();
        updateScoreBoard();
        updateIncorrect();

    }

    private void initScoreBoard() {
        // Set the scoreboard labels
        lblScore.setText("" + this.CURRENT_SCORE);
        lblTarget.setText("Target: " + this.TARGET_SCORE);
    }

    private void updateScoreBoard() {
        // Change the scoreboard score
        lblScore.setText("" + this.CURRENT_SCORE);
    }

    private void updateIncorrect() {
        // Update the label showing the number of incorrect answers
        lblIncorrect.setText("Incorrect: " + this.NUM_INCORRECT);
    }

    private void answerIncorrect() {
        // The answer was incorrect
        this.NUM_INCORRECT += 1;
    }

    public void stop() {
        // Stop without being disqualified
        stop(false);
    }

    public void stop(boolean isDisqualified) {
        // Stop the stopwatch
        STOPWATCH.close();
        if (isDisqualified) {
            // User disqualified
            JOptionPane.showMessageDialog(this, "You have gotten 3 questions wrong!"
                    + "\n Please try again.");
        }
        // Make main screen visible
        this.parentGUI.setVisible(true);
        // Close this screen
        this.dispose();
        System.out.println("GUIQuestion closed.");
    }

    private void openFeedbackGUI() throws IOException {
        System.out.println("Target Score reached.");
        System.out.println("");

        // Get the operator as an int
        int op = 0;
        switch (this.CURR_OPERATOR) {
            case ADDITION:
                op = 0;
                break;
            case SUBTRACTION:
                op = 1;
                break;
            case MULTIPLICATION:
                op = 2;
                break;
            case DIVISION:
                op = 3;
                break;
        }

        // Open a new Feedback GUI
        GUIFeedback GUIF = new GUIFeedback(this, this.TARGET_SCORE, this.SELECTED_DIFFICULTY, op, this.MILLISECONDS_PASSED, this.NAME);
        GUIF.setVisible(true); // Make it visible
        this.setVisible(false); // Make current GUI invisible
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOption1;
    private javax.swing.JButton btnOption2;
    private javax.swing.JButton btnOption3;
    private javax.swing.JButton btnOption4;
    private javax.swing.JButton btnStop;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblIncorrect;
    private javax.swing.JLabel lblOlympicRingsImg;
    private javax.swing.JLabel lblQuestion;
    private javax.swing.JLabel lblScore;
    private javax.swing.JLabel lblStopwatch;
    private javax.swing.JLabel lblTarget;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JPanel pnlBackground;
    private javax.swing.JPanel pnlIncorrect;
    private javax.swing.JPanel pnlOption1;
    private javax.swing.JPanel pnlOption2;
    private javax.swing.JPanel pnlOption3;
    private javax.swing.JPanel pnlOption4;
    private javax.swing.JPanel pnlOptions;
    private javax.swing.JPanel pnlQuestion;
    private javax.swing.JPanel pnlScoreMain;
    private javax.swing.JPanel pnlScoreSub;
    private javax.swing.JPanel pnlStopwatch;
    private javax.swing.JPanel pnlTitle;
    // End of variables declaration//GEN-END:variables
}
